// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package destination

import (
	"github.com/conduitio/conduit-commons/config"
)

const (
	ConfigConnectionName          = "connectionName"
	ConfigCredentialsFilePath     = "credentialsFilePath"
	ConfigMaxReconnects           = "maxReconnects"
	ConfigNkeyPath                = "nkeyPath"
	ConfigReconnectWait           = "reconnectWait"
	ConfigSubject                 = "subject"
	ConfigTlsClientCertPath       = "tls.clientCertPath"
	ConfigTlsClientPrivateKeyPath = "tls.clientPrivateKeyPath"
	ConfigTlsRootCACertPath       = "tls.rootCACertPath"
	ConfigUrls                    = "urls"
)

func (Config) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		ConfigConnectionName: {
			Default:     "",
			Description: "Optional connection name (can come in handy when it comes to monitoring).",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigCredentialsFilePath: {
			Default:     "",
			Description: "A path pointed to a credentials file.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigMaxReconnects: {
			Default:     "5",
			Description: "Sets the number of reconnect attempts that will be tried before giving up.\nIf negative, it will never give up trying to reconnect.",
			Type:        config.ParameterTypeInt,
			Validations: []config.Validation{},
		},
		ConfigNkeyPath: {
			Default:     "",
			Description: "A path pointed to a NKey pair.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigReconnectWait: {
			Default:     "5s",
			Description: "Sets the time to backoff after attempting a reconnect to a server that we\nwere already connected to previously, formatted as a time.Duration string.",
			Type:        config.ParameterTypeDuration,
			Validations: []config.Validation{},
		},
		ConfigSubject: {
			Default:     "",
			Description: "The name of a subject which the connector should use to read/write records.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigTlsClientCertPath: {
			Default:     "",
			Description: "A path pointed to a TLS client certificate, must be present if\ntls.clientPrivateKeyPath field is also present.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigTlsClientPrivateKeyPath: {
			Default:     "",
			Description: "A path pointed to a TLS client private key, must be present if\ntls.clientCertPath field is also present.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigTlsRootCACertPath: {
			Default:     "",
			Description: "A path pointed to a TLS root certificate, provide it if you want to verify\nthe server's identity.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigUrls: {
			Default:     "",
			Description: "A comma-separated list of connection URLs pointing to NATS instances.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
	}
}
